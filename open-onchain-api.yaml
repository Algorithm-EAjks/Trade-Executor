# Open on-chain data API specification

openapi: 3.0.2
info:
  version: '0.1'

  title: Open on-chain data API

  contact:
    email: mikko@tradingstrategy.ai # [Optional] Replace with your contact email
    url: 'https://tradingstrategy.ai' # [Optional] Replace with link to your contact form
  license:
    name: GNU AFFERO GENERAL PUBLIC LICENSE 3
    url: 'https://github.com/tradingstrategy-ai/spec/blob/main/LICENSE'
  x-logo:
    url: 'https://raw.githubusercontent.com/tradingstrategy-ai/frontend/master/src/lib/assets/logo-two-lines.svg'

  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |

    This is an API access to decentralised exchange trading data, tokens and other blockchain on-chain trading information.
    For more information see [Trading Strategy](https://tradingstrategy.ai/) website.

    **This API is still in beta and subject to change radically**.

    # Introduction

    This API offers access to cryptocurrency trading data from decentralised exchanges running on various blockchains.
    These APIs are aimed to be consumed in the server-side frontend rendering and through direct web browser
    JavaScript client access. [For backtesting and tradingAPI, see the Trading Strategy client documentation](https://tradingstrategy.ai/docs/).

    You can fetch both live and historical data.

    # Remarks

    ## Trading pair and token uniqueness

    There can be multiple trading pairs with the same name and symbol (fake tokens).
    The tokens are uniquely identified by their smart contract address.

    ## Base and quote token order

    Base token and quote token follow a predefined order of token priorities.

    The priorities are: Other tokens > ETH > BTC > any USD token.

    # About OpenAPI Specification used

    This API specification is written in OpenAPI v3.

    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities of the service without access to source
    code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can
    understand and interact with the remote service with a minimal amount of implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.

externalDocs:
  description: TradingStrategy Python client documentation
  url: 'https://tradingstrategy.ai/docs/'

# A list of tags used by the definition with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Exchange
    description: Data about decentralised exchanges
servers:
  - url: 'https://tradingstrategy.ai/api/'

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL.
paths:
  '/exchanges':
    x-pyramid-route-name: web_exchanges
    get:
      operationId: web_exchanges
      summary: List of available exchanges
      tags:
        - Exchange
      responses: # list of responses
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeSummaryListing"

  '/exchange-details':
    x-pyramid-route-name: web_exchange_details
    get:
      operationId: web_exchange_details
      summary: Get data for one exchange to render the exchange page
      parameters:
        - name: exchange_slug
          in: query
          description: Exchange path slug e.g, "uniswap-v2"
          required: true
          schema:
            type: string
        - name: chain_slug
          in: query
          description: Blockchain slug, e.g, "ethereum"
          required: true
          schema:
            type: string

      tags:
        - Exchange
      responses: # list of responses
        '200':
          description: OK
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/ExchangeDetails'
        '404':
          description: Exchange not found - either chain or exchange slug does not match
        "422":
          description: Unexpected error - usually bad query input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/pair-details':
    x-pyramid-route-name: web_pair_details
    get:
      operationId: web_pair_details
      summary: Get the complete data for one trading pair to render the pair page
      parameters:
        - name: exchange_slug
          in: query
          description: Exchange path slug e.g, "uniswap-v2"
          required: true
          schema:
            type: string
          example: uniswap-v2
        - name: chain_slug
          in: query
          description: Blockchain slug, e.g, "ethereum"
          required: true
          schema:
            type: string
          example: ethereum
        - name: pair_slug
          in: query
          description: >

            Trading pair friendly presentation (token0 symbol - token1 symbol) or pair pool contract address.

            Symbols can be in any order: base token - quote token or quote token - base token.

            If multiple trading pairs match the same symbol the one with the highest volume is returned
            (assuming other trading pairs are ones with a fake token).

            Examples of accepted `pair_slugs`:
            - `ETH-USDC`
            - `eth-usdc`
            - `WETH-USDC`
            - `USDC-WETH`
            - `0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc`

            The response is a composite of pair summary information, additional trading volume numbers and related links.

          required: true
          schema:
            type: string
          example: ETH-USDC

      tags:
        - Pair
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairFullInfo'
        '404':
          description: Pair not found
        "422":
          description: Unexpected error - usually bad query input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/pairs':
    x-pyramid-route-name: web_pairs
    get:
      operationId: web_pairs
      summary: Query and filter trading pairs
      description: >

        Query different combinations of the trading pairs.

        The most common query is all trading pairs of a decentralised exchange.

        `/pairs?chain_slugs=ethereum&exchange-slugs=uniswap-v2`

        The results are always paginated.

        ## Parameter seralisation

        Note that lists are not JSON serialised, but use [OpenAPI query parameter serialization](https://swagger.io/docs/specification/serialization/). I.e. lists are comma separated, no spaces between items.

      parameters:
        - name: exchange_slugs
          in: query
          description: Slugs for DEXes to look up
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
          example:
            - uniswap-v2
        - name: chain_slugs
          in: query
          description: Slugs for blockchain to look up
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
          example:
            - ethereum
        - name: token0
          in: query
          description: Symbol of one of the token pairs e.g. WETH
          required: false
          schema:
            type: string
            maximum: 32
          example:
        - name: token1
          in: query
          description: Symbol of one of the token pairs e.g. USDC
          required: false
          schema:
            type: string
            maximum: 32
          example:
        - name: page
          in: query
          description: Page number, zero-indexed
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 1000
        - name: page_size
          in: query
          description: Limit number of pairs returned (default is 20)
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 1000
        - name: sort
          in: query
          description: >

            What kind of sort options is available for the list

            The default `pair_id` sorting makes only sense for machine-to-machine actions.
            The recommended sort method is by descending volume (most interesting trading pairs first).

          required: false
          schema:
            type: string
            default: pair_id
            minimum: 1
            maximum: 100
            enum: [pair_id, volume, price_change, liquidity]
        - name: direction
          in: query
          description: >
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: filter_junk
          in: query
          description: >
             If there are multiple token pairs with matching symbols in the result,
             choose one with the highest volume and hide the others.
          required: false
          schema:
            type: boolean
            default: true
      tags:
        - Pair
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPairSummary'
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"

  '/candles':
    x-pyramid-route-name: web_candles
    get:
      operationId: web_candles
      summary: Get the candle stick chart data for one trading pair
      description: >

        Fetch candle data for a single trading pair.

        You need to resolve the symbolic trading pair name to `pair_id` primary key with `/pairs` or `/pair-details`
        to call this API endpoint.

        Candle response size is limited to 10,000 candles. Only the first 10,000 candles
        since the start timestamp is returned.

        [Inspired by Bitfinex API](https://docs.bitfinex.com/reference#rest-public-candles).

      parameters:
        - name: pair_id
          in: query
          description: >

            Primary key for the trading pair

            For tests and demos use id `1` which is ETH/USDC pair on Uniswap v2,
            as it is the first deployed Uniswap v2 compatible pool.

          required: true
          schema:
            type: integer
            minimum: 1
          example: 1
        - name: time_bucket
          in: query
          description: >

              What time bucket to use for the candle size.

          required: true
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h, 4h, 1d, 7d, 30d]
          example: 1h
        - name: start
          in: query
          description: >

              When the candle fetch period starts.

              Use UNIX UTC timestamp, as ISO 8601 formatted string.
              [Read more information about the time format](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat).

              If not specific this will be resolved to now() - time_bucket * 100, or getting the last 100 candles.

              This range parameter is inclusive.

          required: false
          schema:
            type: string
            format: iso8601
          example: 2020-05-18 00:00
        - name: end
          in: query
          description: >

              When the candle fetch period ends.

              Use UNIX UTC timestamp, as ISO 8601 formatted string.

              If not specific this will be resolved to now().

              This range parameter is inclusive.

          required: false
          schema:
            type: string
            format: iso8601
            minimum: 0
          example: 2020-05-19 00:00

      tags:
        - Pair
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandleList'
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"


# An object to hold reusable parts that can be used across the definition
components:
  schemas:
    ExchangeSummaryListing:
      type: object
      properties:
        exchanges:
          type: array
          items:
            $ref: "#/components/schemas/ExchangeSummary"
    ExchangeSummary:
      type: object
      properties:
        notable:
          description: Should be shown by default
          type: boolean
          example: true
        exchange_id:
          description: Primary key for exchange
          type: integer
          example: 1
        chain_id:
          description: Ethereum chain id for the blockchain this exchange runs on, from https://chainlist.org/
          type: integer
          example: 1
        exchange_slug:
          description: URL slug for the exchange
          type: string
          example: uniswap_v2
        chain_slug:
          description: URL slug for the blockchain on which this exchange runs
          type: string
          example: ethereum
        human_readable_name:
          description: Human readable name for this exchange. If there is no known name, then it is generated based on the address.
          type: string
          minLength: 4
          example: Uniswap (v2)
        address:
          description: Ethereum address, non-checksummed, for the exchange factory
          type: string
          minLength: 4
          example: 0x0
        exchange_type:
          description: Exchange type enum - see https://tradingstrategy.ai/docs/programming/api/exchange.html#tradingstrategy.exchange.ExchangeType
          type: string
          minLength: 4
          example: uni_v2
        usd_volume_30d:
          description: USD volume for the last 30 days
          type: number
          example: 100000.00
    ExchangeDetails:
      type: object
      properties:
        exchange_id:
          description: Machine readable string id for this exchange.
          type: string
          minLength: 4
          example: uniswap_v2
        human_readable_name:
          description: Human readable name for this exchange
          type: string
          minLength: 4
          example: Uniswap
        homepage:
          description: Link to the exchange trade page
          type: string
          format: uri
          example: https://uniswap.org
        twitter:
          description: Link to the exchange Twitter
          type: string
          format: uri
          example: https://twitter.com/uniswap
        explorer:
          description: Link to a smart contract explorer showing the main contract
          type: string
          format: uri
          example: https://etherscan.io
        address:
          description: The factory address for Uniswap AMM like setups
          example: 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f
        buy_volume_30d:
          description: Buy USD volume for the last 30 days
          type: number
          example: 100000.00
        sell_volume_30d:
          description: Sell USD volume for the last 30 days
          type: number
          example: 100000.00
        buy_volume_all_time:
          description: Buy USD volume for all time
          type: number
          example: 100000.00
        sell_volume_all_time:
          description: Sell USD volume for all time
          type: number
          example: 100000.00
        buy_count_all_time:
          description: Number of individual buy transactions
          type: integer
          example: 1
        sell_count_all_time:
          description: Number of individual sell transactions
          type: integer
          example: 1

    PairSummary:
      description: >
          Summary of the trading pair.

          Used to return pair data in listings.

      properties:
        pair_id:
          description: Primary key for the traidng pair
          type: integer
          example: 1
        exchange_id:
          description: Exchange primary key where this token trades
          type: integer
          example: 1
        exchange_slug:
          description: URL slug for the exchange
          type: string
          example: uniswap_v2
        chain_slug:
          description: URL slug for the blockchain on which this exchange runs
          type: string
          example: ethereum
        chain_id:
          description: Ethereum chain id for the blockchain this exchange runs on, from https://chainlist.org/
          type: integer
          example: 1
        base_token_symbol:
          description: Token that is being bought
          type: string
          example: WETH
        quote_token_symbol:
          description: Token that is used as a currency
          type: string
          example: USDC
        base_token_address:
          description: Smart contract address of the base token
          type: string
          format: Ethereum address
          example: 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f
        quote_token_address:
          description: Smart contract address of the quote token
          type: string
          format: Ethereum address
          example: 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f
        pool_address:
          description: Pool contract address
          type: string
          minLength: 4
          example: 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f
          format: Ethereum address
        usd_price_latest:
          description: >
              Base token/quote token converted to USD through direct quote token/USD exchange rate.

              The close of the 15 minute candle.
          type: number
          example: 250.12
        price_change_24h:
          description: >
              The % how much price has changed for the last 24h.

          type: number
          example: 0.05
        usd_volume_24h:
          description: USD trading volume for the last day
          type: number
          example: 100000.00
        usd_liquidity_latest:
          description: The current available XY liquidity
          type: number
          example: 100000.00
        liquidity_change_24h:
          description: >
              The % how much liquidity has changed for the last 24h.

          type: number
          example: 0.05
        liquidity_type:
          description: What of liquidity measurement is used
          type: string
          example: xyliquidity
          enum: [xyliquidity]

    PaginatedPairSummary:
      description: >
          Iterate through a list of PairSummary responses

      properties:
        total:
          description: Total results entries
          type: integer
          example: 100
        pages:
          description: Total result pages
          type: integer
          example: 10
        results:
          description: One page of pair summaries
          type: array
          items:
            $ref: '#/components/schemas/PairSummary'

    GenericErrorModel:
      description: >
          Returned in 422 Unprocessable Entity errors.

          Usually means some of the query input parameters are invalid.

      properties:
        error_id:
          description: Machine readable identifier for the error
          type: string
          example: LookupInputException
        message:
          description: Human readable message for the errir
          type: string

    Candle:
      description: >

        One OHLCV candle for the candle charts

        [Read more about what trading candles are](https://tradingstrategy.ai/docs/glossary.html#term-Candle).

      type: object
      properties:
        ts:
          description: >

            UNIX UTC timestamp as ISO 8601 formatted string.

          type: number
          format: timestamp
        o:
          description: >
            Open value of the candle
          type: number
          format: us_dollar
        h:
          description: >
            High value of the candle
          type: number
          format: us_dollar
        l:
          description: >
            Low value of the candle
          type: number
          format: us_dollar
        c:
          description: >
            Close value of the candle
          type: number
          format: us_dollar
        v:
          description: >
            Trade volume in US dollar
          type: number
          format: us_dollar
        xr:
          description: >

            `xr` stands for the exchange rate.

            Appromaxime exchange rate between US dollar and quote token for this candle.

            The actual exchange rate may be true only for 1 minute candles.
            The 1 minute candles use reference price oracle for quote token/USD.
            Other candle data is upsampled from the 1 minute candles and do not internally use any exchange rate.

            Any USD stablecoin is assumed to be 1:1 to actual USD.

          type: number
        tc:
          description: >

            `ct` stands for the trade count.

            Number of individual trades executed during the candle time period.

          type: number
    CandleList:
      description: >

        Multiple candles to render.

        Note that this data is sparse. If there were no trades, the timestamp for the candle time bucket
        period does not exist in the array.

        Candles will be sorted from the first to the last.

      type: array
      items:
        $ref: '#/components/schemas/Candle'

    TimeSpanTradeData:
      description: >

        Trade data for a seleced timespan.

      type: object
      properties:
        price_open:
          description: >
            Open value of the candle
          type: number
          format: us_dollar
        price_high:
          description: >
            High value of the candle
          type: number
          format: us_dollar
        price_low:
          description: >
            Low value of the candle
          type: number
          format: us_dollar
        price_close:
          description: >
            Close value of the candle
          type: number
          format: us_dollar
        volume:
          description: >
            Trade volume in US dollar
          type: number
          format: us_dollar
        liquidity_high:
          description: >
            Max liquidity during the period
          type: number
          format: us_dollar
        liquidity_low:
          description: >
            Min liquidity during the period
          type: number
          format: us_dollar
        buys:
          description: >
            Number of individual buys
          type: integer
        sells:
          description: >
            Number of individual sells
          type: integer
        liquidity_events:
          description: >
            Number of individual liquidity events - how many times liquidity was added or removed from the pool
          type: integer

    PairAdditionalDetails:
      description: >

        Additional details on a trading pair.

      type: object
      properties:
        first_trade_at:
          description: >
            When the first trade was made
          type: string
          format: iso8601
        last_trade_at:
          description: >
            When the last seen trade was made
          type: string
          format: iso8601
        base_token_homepage:
          description: >
            Homepage of the base token
          type: string
          format: url
        quote_token_homepage:
          description: >
            Homepage of the quote token
          type: string
          format: url

    PairFullInfo:
      description: >

        All information on the trading pair to render a full page on it.

      type: object
      properties:
        summary:
          type: object
          $ref: '#/components/schemas/PairSummary'
        additional_details:
          type: object
          $ref: '#/components/schemas/PairAdditionalDetails'
        daily:
          type: object
          $ref: '#/components/schemas/TimeSpanTradeData'