# This is an **example** API to demonstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

openapi: 3.0.2
info:
  version: '9.0.1'

  title: Open on-chain data API

  contact:
    email: mikko@tradingstrategy.ai # [Optional] Replace with your contact email
    url: 'https://tradingstrategy.ai' # [Optional] Replace with link to your contact form
  license:
    name: GNU AFFERO GENERAL PUBLIC LICENSE 3
    url: 'https://github.com/tradingstrategy-ai/spec/blob/main/LICENSE'
  x-logo:
    url: 'https://raw.githubusercontent.com/tradingstrategy-ai/frontend/master/src/lib/assets/logo-two-lines.svg'

  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |

    An API access to decentralised exchange trading data, tokens and other information.
    For more information see [Trading Strategy](https://tradingstrategy.ai/) website.

    # Introduction

    This API offers access to cryptocurrency trading data from decentralised exchanges running on various blockchains.
    These APIs are aimed to be consumed in the server-side frontend rendering and through direct web browser
    JavaScript client access. [For backtesting and tradingAPI, see the Trading Strategy client documentation](https://tradingstrategy.ai/docs/).

    # Token uniqueness

    There can be multiple trading pairs with the same name and symbol (fake tokens).
    The tokens are uniquely identified by their smart contract address.

    ## Token order

    Base token and quote token follow a predefined order of token priorities.

    Other tokens > ETH > BTC > any USD token.

    ## Volume

    The trading volume of all transactions for the last 24h.

    ## Liquidity measuring

    The highest available liquidity for the last 24h is given.

    The XY liquidity is measured as the pool depth as the quote token pair of the pool.

    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities of the service without access to source
    code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can
    understand and interact with the remote service with a minimal amount of implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.

externalDocs:
  description: TradingStrategy Python client documentation
  url: 'https://tradingstrategy.ai/docs/'

# A list of tags used by the definition with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Exchange
    description: Data about decentralised exchanges
servers:
  - url: 'https://matilda.tradingstrategy.ai/'

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL.
paths:
  '/exchanges':
    x-pyramid-route-name: web_exchanges
    get:
      operationId: web_exchanges
      summary: List of available exchanges
      tags:
        - Exchange
      responses: # list of responses
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeSummaryListing"

  '/exchange-details':
    x-pyramid-route-name: web_exchange_details
    get:
      operationId: web_exchange_details
      summary: Get data for one exchange to render the exchange page
      parameters:
        - name: exchange-slug
          in: query
          description: Exchange path slug e.g, "uniswap-v2"
          required: true
          schema:
            type: string
        - name: chain-slug
          in: query
          description: Blockchain slug, e.g, "ethereum"
          required: true
          schema:
            type: string

      tags:
        - Exchange
      responses: # list of responses
        '200':
          description: OK
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/ExchangeDetails'
        '404':
          description: Exchange not found - either chain or exchange slug does not match

  '/pairs':
    x-pyramid-route-name: web_pairs
    get:
      operationId: web_pairs
      summary: Query and filter trading pairs
      description: >

        Query different combinations of the trading pairs.

        The most common query is all trading pairs of a decentralised exchange.

        `/pairs?chain_slugs=ethereum&exchange-slugs=uniswap-v2`

        The results are always paginated.

        ## Parameter seralisation

        Note that lists are not JSON serialised, but use [OpenAPI query parameter serialization](https://swagger.io/docs/specification/serialization/). I.e. lists are comma separated, no spaces between items.

      parameters:
        - name: exchange_slugs
          in: query
          description: Slugs for DEXes to look up
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example: uniswap-v2
        - name: chain_slugs
          in: query
          description: Slugs for blockchain to look up
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example: ethereum
        - name: token0
          in: query
          description: Symbol of one of the token pairs
          required: false
          schema:
            type: string
            maximum: 32
          example: WETH
        - name: token1
          in: query
          description: Symbol of one of the token pairs
          required: false
          schema:
            type: string
            maximum: 32
          example: USDC
        - name: page
          in: query
          description: Page number, zero-indexed
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 1000
        - name: page_size
          in: query
          description: Limit number of pairs returned (default is 20)
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 1000
        - name: sort
          in: query
          description: What sort method to use for the results
          required: false
          schema:
            type: string
            default: pair_id
            minimum: 1
            maximum: 100
            # # https://swagger.io/docs/specification/data-models/enums/
            enum: [pair_id, volume, transaction_count, base_token_name, quote_token-name]
        - name: direction
          in: query
          description: >
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: filter_junk
          in: query
          description: >
             If there are multiple token pairs with matching symbols in the result,
             choose one with the highest volume and hide the others.
          required: false
          schema:
            type: boolean
            default: true
      tags:
        - Pair
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPairSummary'
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"


# An object to hold reusable parts that can be used across the definition
components:
  schemas:
    ExchangeSummaryListing:
      type: object
      properties:
        exchanges:
          type: array
          items:
            $ref: "#/components/schemas/ExchangeSummary"
    ExchangeSummary:
      type: object
      properties:
        notable:
          description: Should be shown by default
          type: boolean
          example: true
        exchange_id:
          description: Primary key for exchange
          type: integer
          example: 1
        chain_id:
          description: Ethereum chain id for the blockchain this exchange runs on, from https://chainlist.org/
          type: integer
          example: 1
        exchange_slug:
          description: URL slug for the exchange
          type: string
          example: uniswap_v2
        chain_slug:
          description: URL slug for the blockchain on which this exchange runs
          type: string
          example: ethereum
        human_readable_name:
          description: Human readable name for this exchange. If there is no known name, then it is generated based on the address.
          type: string
          minLength: 4
          example: Uniswap (v2)
        address:
          description: Ethereum address, non-checksummed, for the exchange factory
          type: string
          minLength: 4
          example: 0x0
        exchange_type:
          description: Exchange type enum - see https://tradingstrategy.ai/docs/programming/api/exchange.html#tradingstrategy.exchange.ExchangeType
          type: string
          minLength: 4
          example: uni_v2
        usd_volume_30d:
          description: USD volume for the last 30 days
          type: number
          example: 100000.00
    ExchangeDetails:
      type: object
      properties:
        exchange_id:
          description: Machine readable string id for this exchange.
          type: string
          minLength: 4
          example: uniswap_v2
        human_readable_name:
          description: Human readable name for this exchange
          type: string
          minLength: 4
          example: Uniswap
        homepage:
          description: Link to the exchange trade page
          type: string
          format: uri
          example: https://uniswap.org
        twitter:
          description: Link to the exchange Twitter
          type: string
          format: uri
          example: https://twitter.com/uniswap
        explorer:
          description: Link to a smart contract explorer showing the main contract
          type: string
          format: uri
          example: https://etherscan.io
        address:
          description: The factory address for Uniswap AMM like setups
          example: 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f
        buy_volume_30d:
          description: Buy USD volume for the last 30 days
          type: number
          example: 100000.00
        sell_volume_30d:
          description: Sell USD volume for the last 30 days
          type: number
          example: 100000.00
        buy_volume_all_time:
          description: Buy USD volume for all time
          type: number
          example: 100000.00
        sell_volume_all_time:
          description: Sell USD volume for all time
          type: number
          example: 100000.00
        buy_count_all_time:
          description: Number of individual buy transactions
          type: integer
          example: 1
        sell_count_all_time:
          description: Number of individual sell transactions
          type: integer
          example: 1

    PairSummary:
      description: >
          Summary of the trading pair.

          Used to return pair data in listings.

      properties:
        pair_id:
          description: Primary key for the traidng pair
          type: integer
          example: 1
        exchange_id:
          description: Exchange primary key where this token trades
          type: integer
          example: 1
        exchange_slug:
          description: URL slug for the exchange
          type: string
          example: uniswap_v2
        chain_slug:
          description: URL slug for the blockchain on which this exchange runs
          type: string
          example: ethereum
        chain_id:
          description: Ethereum chain id for the blockchain this exchange runs on, from https://chainlist.org/
          type: integer
          example: 1
        base_token_symbol:
          description: Token that is being bought
          type: string
          example: WETH
        quote_token_symbol:
          description: Token that is used as a currency
          type: string
          example: USDC
        base_token_address:
          description: Smart contract address of the base token
          type: string
          format: Ethereum address
          example: 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f
        quote_token_address:
          description: Smart contract address of the quote token
          type: string
          format: Ethereum address
          example: 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f
        pool_address:
          description: Pool contract address
          type: string
          minLength: 4
          example: 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f
          format: Ethereum address
        usd_volume_30d:
          description: USD trading volume for the last 30 days
          type: number
          example: 100000.00
        liquidity_high_24h:
          description: The maximum liquidity
          type: number
          example: 100000.00
        liquidity_type:
          description: What of liquidity measurement is used
          type: string
          example: xyliquidity
          enum: [xyliquidity]

    PaginatedPairSummary:
      description: >
          Iterate through a list of PairSummary responses

      properties:
        total:
          description: Total results entries
          type: integer
          example: 100
        pages:
          description: Total result pages
          type: integer
          example: 10
        results:
          description: One page of pair summaries
          type: array
          items:
            $ref: '#/components/schemas/PairSummary'

    GenericErrorModel:
      description: >
          Returned in 422 Unprocessable Entity errors.

          Usually means some of the query input parameters are invalid.

      properties:
        error_id:
          description: Machine readable identifier for the error
          type: string
          example: LookupInputException
        message:
          description: Human readable message for the errir
          type: string